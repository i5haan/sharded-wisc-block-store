syntax = "proto3";

service Hafs
{
    rpc HeartBeat(Request) returns (HeartBeatResponse) {}
    rpc Read(ReadRequest) returns (ReadResponse) {}
    rpc Write(WriteRequest) returns (Response) {}
    rpc ReplicateBlock(WriteRequest) returns (Response) {}
    rpc CommitBlock(WriteRequest) returns (Response) {}
    rpc CheckConsistancy(ReadRequest) returns (Response) {}
    rpc TriggerShuffle(TriggerRequest) returns (Response) {}
}

service Master
{
    rpc SetState(MStatus) returns (Response) {}
    rpc GetState(Request) returns (Response) {}
    rpc ActiveConnections(Request) returns (stream Connection) {}
    rpc AckMaster(Connection) returns (ConResponse) {}
}
message Request
{

}
message HeartBeatResponse
{
    enum Status {
        VALID     = 0;
        INVALID   = 1;
    }
    enum Role {
        PRIMARY   = 0;
        BACKUP    = 1;
    } 
    enum Health {
        HEALTHY                = 0;
        REINTEGRATION_BEHIND   = 1;
        REINTEGRATION_AHEAD    = 2;
        SINGLE_REPLICA_AHEAD   = 3;
        SHUFFLE                = 4;
        UNHEALTHY              = 5;      
    }
    Role role      = 1;
    Status status  = 2;
    Health health  = 3;
    int32 blockload = 4;

}

message Response
{
    enum Status {
        VALID     = 0;
        INVALID   = 1;
    }
    Status status = 1;   
}

message ConResponse
{
    enum Status {
        VALID     = 0;
        INVALID   = 1;
    }
    Status status = 1;   
    int32 shardcnt = 2;
}

message ReadRequest
{
    int32 address = 1;
} 

message ReadResponse
{
    enum Status {
        VALID     = 0;
        INVALID   = 1;
    }
    Status status = 1;
    string data   = 2;
}

message WriteRequest
{
    int32 address = 1;
    int32 actualaddress = 2;
    string data   = 3;
}

message Connection
{
    int32 id = 1;
    string primaryaddr = 2;
    string backupaddr = 3;
}

message TriggerRequest
{
    int32 newshardcount = 1;
}

message MStatus
{
    enum Status {
        VALID     = 0;
        INVALID   = 1;
    }
    Status state = 1; 
}

